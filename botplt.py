from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# Token de tu bot
TOKEN = "7749919832:AAGeUSe3Us1Pc2exRjw59172Z2W-MbRpw6M"

# Diccionario de preguntas y respuestas
questions = {
    "q1": ("Â¿QuÃ© son las plaquetas y cuÃ¡l es su funciÃ³n en la sangre?",
           "Las plaquetas son fragmentos de cÃ©lulas que ayudan a la coagulaciÃ³n de la sangre. Juegan un papel crucial en la detenciÃ³n del sangrado."),
    "q2": ("Â¿CuÃ¡les son los requisitos para donar plaquetas?",
           "Debes tener entre 18 y 60 aÃ±os, estar en buen estado de salud, y tener un peso adecuado."),
    "q3": ("Â¿CuÃ¡nto tiempo debe pasar entre una donaciÃ³n de plaquetas y otra?",
           "Normalmente, debes esperar al menos 15 dÃ­as entre donaciones."),
    "q4": ("Â¿CÃ³mo se extraen las plaquetas del donante?",
           "Mediante un procedimiento llamado afÃ©resis, a travÃ©s de una mÃ¡quina especializada."),
    "q5": ("Â¿QuÃ© beneficios tiene la donaciÃ³n de plaquetas para los pacientes?",
           "Ayuda a pacientes con leucemia y otros trastornos hematolÃ³gicos a prevenir hemorragias."),
    "q6": ("Â¿Si sufro de alguna enfermedad puedo donar?",
           "Depende del tipo de enfermedad. Se realiza una evaluaciÃ³n mÃ©dica antes de cada donaciÃ³n."),
    "q7": ("Â¿Cada cuÃ¡nto se renuevan mis plaquetas?",
           "Las plaquetas se regeneran aproximadamente cada 48 horas."),
    "q8": ("Â¿CuÃ¡nto dura el proceso de donaciÃ³n?",
           "Entre 1 y 2 horas, dependiendo del procedimiento."),
    "q9": ("Â¿QuÃ© requisitos tiene?",
           "Ser mayor de 18 aÃ±os, pesar mÃ¡s de 50 kg y gozar de buena salud."),
    "q10": ("Â¿QuÃ© es la donaciÃ³n de plaquetas?",
            "Es un procedimiento donde se extraen plaquetas de un donante mediante afÃ©resis para ayudar a pacientes necesitados.")
}

# Enviar saludo y botones como mensajes separados
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Saludo
    await update.message.reply_text(
        "ðŸ‘‹ Â¡Hola! Soy *PlasmaBot*, tu asistente sobre donaciÃ³n de plaquetas.",
        parse_mode="Markdown"
    )

    # Mostrar menÃº de preguntas
    keyboard = [
        [InlineKeyboardButton(text=question, callback_data=qid)]
        for qid, (question, _) in questions.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "Selecciona una pregunta para conocer la respuesta:",
        reply_markup=reply_markup
    )

# Mostrar la respuesta y volver a mostrar el menÃº
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    qid = query.data
    question, answer = questions.get(qid, ("Pregunta no encontrada", "No tengo una respuesta para eso."))

    await query.edit_message_text(f"*{question}*\n\n{answer}", parse_mode="Markdown")

    # Volver a mostrar el menÃº
    keyboard = [
        [InlineKeyboardButton(text=q, callback_data=key)]
        for key, (q, _) in questions.items()
    ]
    await query.message.reply_text(
        "Â¿Deseas saber algo mÃ¡s? Elige otra pregunta:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ConfiguraciÃ³n principal
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_answer))

    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
